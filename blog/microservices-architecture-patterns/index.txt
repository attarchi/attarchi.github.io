2:I[6717,["598","static/chunks/e58627ac-b8c690ac192fc9ab.js","250","static/chunks/250-f9f2009f4af0cdf6.js","849","static/chunks/849-0715065569a133e2.js","622","static/chunks/622-b342b458002938d4.js","308","static/chunks/app/blog/%5Bslug%5D/page-47c2c8e51e3a9834.js"],"BlogPostPage"]
5:I[5613,[],""]
7:I[1778,[],""]
8:I[9809,["185","static/chunks/app/layout-285119e7d67da122.js"],"ProgressBar"]
9:I[4279,["185","static/chunks/app/layout-285119e7d67da122.js"],"ThemeProvider"]
a:I[5250,["250","static/chunks/250-f9f2009f4af0cdf6.js","849","static/chunks/849-0715065569a133e2.js","404","static/chunks/app/blog/page-da7a949822f75943.js"],""]
3:T419,
# Microservices Architecture Patterns

A comprehensive guide to designing and implementing scalable microservices architectures.

## What are Microservices?

Microservices are an architectural style where an application is built as a collection of small, autonomous services that communicate over well-defined APIs.

## Key Patterns

### 1. API Gateway Pattern

The API Gateway acts as a single entry point for all client requests, handling cross-cutting concerns like authentication, rate limiting, and routing.

### 2. Circuit Breaker Pattern

Circuit breakers prevent cascading failures by monitoring for failures and stopping the flow of requests when a threshold is reached.

### 3. Event-Driven Architecture

Services communicate through events, enabling loose coupling and better scalability.

## Implementation Considerations

- **Service Discovery**: How services find each other
- **Load Balancing**: Distributing traffic across instances
- **Monitoring**: Observability and health checks
- **Security**: Authentication and authorization
4:Tadc,
# Building Offline-First Apps

This is a comprehensive guide to building offline-first applications that work seamlessly even when users have poor or no internet connectivity.

## Why Offline-First?

Offline-first applications provide a superior user experience by:

- Working immediately without waiting for network requests
- Continuing to function in areas with poor connectivity
- Reducing server load and bandwidth usage
- Providing faster response times for common operations

## Key Components

### 1. Data Synchronization

```javascript
const syncData = async () => {
  const offlineData = await getOfflineData();
  const onlineData = await fetchOnlineData();
  return mergeData(offlineData, onlineData);
};
```

### 2. Conflict Resolution

When data changes occur both offline and online, you need a strategy to resolve conflicts:

- **Last Write Wins**: Simple but can lose data
- **Merge Strategies**: More complex but preserves all changes
- **User Resolution**: Let users choose which version to keep

### 3. Storage Strategy

Choose the right storage mechanism for your needs:

- **IndexedDB**: For complex data structures
- **LocalStorage**: For simple key-value pairs
- **SQLite**: For relational data (in mobile apps)

## Implementation Example

Here's a basic implementation using React Native and AsyncStorage:

```javascript
import AsyncStorage from '@react-native-async-storage/async-storage';

class OfflineFirstApp {
  async saveData(key, data) {
    try {
      await AsyncStorage.setItem(key, JSON.stringify(data));
      await this.queueForSync(key, data);
    } catch (error) {
      console.error('Failed to save data:', error);
    }
  }

  async loadData(key) {
    try {
      const offlineData = await AsyncStorage.getItem(key);
      return offlineData ? JSON.parse(offlineData) : null;
    } catch (error) {
      console.error('Failed to load data:', error);
      return null;
    }
  }

  async queueForSync(key, data) {
    const syncQueue = await this.getSyncQueue();
    syncQueue.push({ key, data, timestamp: Date.now() });
    await AsyncStorage.setItem('syncQueue', JSON.stringify(syncQueue));
  }
}
```

## Best Practices

1. **Always cache critical data locally**
2. **Implement proper error handling for network failures**
3. **Use optimistic updates for better UX**
4. **Provide clear feedback about sync status**
5. **Test thoroughly with poor network conditions**

## Conclusion

Building offline-first applications requires careful planning and implementation, but the benefits in user experience are significant. Start with a simple caching strategy and gradually add more sophisticated sync capabilities as your app grows.

Remember: the goal is to make your app feel like it works instantly, regardless of network conditions.
6:["slug","microservices-architecture-patterns","d"]
0:["-4G4MU7MDDE4q9_FpmVD_",[[["",{"children":["blog",{"children":[["slug","microservices-architecture-patterns","d"],{"children":["__PAGE__?{\"slug\":\"microservices-architecture-patterns\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","microservices-architecture-patterns","d"],{"children":["__PAGE__",{},["$L1",["$","$L2",null,{"post":{"title":"Microservices Architecture Patterns","slug":"microservices-architecture-patterns","date":"$D2025-01-10T00:00:00.000Z","excerpt":"Best practices for designing scalable microservices","tags":["Microservices","Architecture","Scalability"],"category":"Backend Development","content":"$3","readingTime":12,"published":true},"prev":{"title":"Building Offline-First Apps","slug":"building-offline-first-apps","date":"$D2025-01-15T00:00:00.000Z","excerpt":"Real-time synchronization strategies for mobile applications","tags":["React Native","Offline","Sync"],"category":"Mobile Development","content":"$4","readingTime":8,"published":true},"next":{"title":"Modern CSS Techniques","slug":"modern-css-techniques","date":"$D2025-01-05T00:00:00.000Z","excerpt":"Advanced CSS features for modern web development","tags":["CSS","Frontend","Web Development"],"category":"Frontend Development","content":"\n# Modern CSS Techniques\n\nExploring the latest CSS features and how to use them effectively in modern web development.\n\n## CSS Grid Layout\n\nCSS Grid provides a powerful two-dimensional layout system:\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n}\n```\n\n## CSS Custom Properties\n\nCustom properties (CSS variables) enable dynamic theming and better maintainability:\n\n```css\n:root {\n  --primary-color: #0969da;\n  --background-color: #ffffff;\n}\n\n.button {\n  background-color: var(--primary-color);\n  color: var(--background-color);\n}\n```\n\n## Modern Selectors\n\nNew CSS selectors provide more powerful targeting capabilities:\n\n```css\n/* Select elements that are the first of their type */\np:first-of-type {\n  font-weight: bold;\n}\n\n/* Select elements that match a pattern */\n[class*=\"btn-\"] {\n  border-radius: 4px;\n}\n```\n","readingTime":6,"published":true}}],null]]},["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$6","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_3c557b __variable_e8ce0c antialiased","suppressHydrationWarning":true,"children":[["$","$L8",null,{}],["$","$L9",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-100","children":["$","div",null,{"className":"text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-gray-800 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-600 mb-4","children":"Page Not Found"}],["$","p",null,{"className":"text-gray-500 mb-8","children":"The page you're looking for doesn't exist or has been moved."}],["$","$La",null,{"href":"/","className":"inline-block bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors","children":"Return Home"}]]}]}],"notFoundStyles":[],"styles":null}]}]]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/383553b74e3df824.css","precedence":"next","crossOrigin":""}]],"$Lb"]]]]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Attarchi - Senior Full-Stack Developer | React, Node.js, Mobile"}],["$","meta","3",{"name":"description","content":"Professional portfolio of Attarchi, a Senior Full-Stack Developer specializing in React, Node.js, TypeScript, and mobile app development. Based in Turkey with expertise in modern web technologies and offline-first architectures."}],["$","meta","4",{"name":"author","content":"Attarchi"}],["$","meta","5",{"name":"keywords","content":"Full-Stack Developer, React, Node.js, TypeScript, Mobile Apps, Turkey, JavaScript, Frontend, Backend, Web Development, Software Engineer"}],["$","meta","6",{"name":"creator","content":"Attarchi"}],["$","meta","7",{"name":"publisher","content":"Attarchi"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://attarchi.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"name":"google-site-verification","content":"your-google-verification-code"}],["$","meta","13",{"property":"og:title","content":"Attarchi - Senior Full-Stack Developer | React, Node.js, Mobile"}],["$","meta","14",{"property":"og:description","content":"Professional portfolio of Attarchi, a Senior Full-Stack Developer specializing in React, Node.js, TypeScript, and mobile app development. Based in Turkey with expertise in modern web technologies."}],["$","meta","15",{"property":"og:url","content":"https://attarchi.github.io/"}],["$","meta","16",{"property":"og:site_name","content":"Attarchi Portfolio"}],["$","meta","17",{"property":"og:locale","content":"en_US"}],["$","meta","18",{"property":"og:type","content":"website"}],["$","meta","19",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","20",{"name":"twitter:creator","content":"@attarchi"}],["$","meta","21",{"name":"twitter:title","content":"Attarchi - Senior Full-Stack Developer | React, Node.js, Mobile"}],["$","meta","22",{"name":"twitter:description","content":"Professional portfolio of Attarchi, a Senior Full-Stack Developer specializing in React, Node.js, TypeScript, and mobile app development."}],["$","link","23",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","24",{"name":"next-size-adjust"}]]
1:null
